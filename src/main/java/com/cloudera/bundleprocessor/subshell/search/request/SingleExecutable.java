/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.cloudera.bundleprocessor.subshell.search.request;

import com.cloudera.bundleprocessor.subshell.command.Command;
import com.cloudera.bundleprocessor.subshell.format.Printable;
import com.cloudera.bundleprocessor.subshell.search.engine.Query;
import com.cloudera.bundleprocessor.subshell.search.engine.SearchEngine;
import com.cloudera.bundleprocessor.subshell.search.format.Formatter;
import com.cloudera.bundleprocessor.subshell.search.format.FormatterModifiers;
import com.google.common.annotations.VisibleForTesting;

import java.io.IOException;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * SingleExecutable represents a search request.
 * SingleExecutables are generated by {@link Command} classes and
 * triggered by CLI commands
 * SingleExecutables are executed by {@link SearchEngine},
 * and their outputObject is transferred back to the {@link Command} class
 */
public class SingleExecutable implements Executable {

  private final Query searchQuery;
  private final Formatter<?> formatter;
  private Printable output;

  protected SingleExecutable(Builder builder) {
    this.searchQuery = builder.queryBuilder.build();
    this.formatter = builder.formatter;
    checkForErrors();
    FormatterModifiers formatterModifiers =
        builder.formatterModifiersBuilder.build();
    this.formatter.init(formatterModifiers);
  }

  private void checkForErrors() {
    if (this.searchQuery.getPattern() == null) {
      throw new IllegalStateException("Pattern is not defined");
    } else if (!this.searchQuery.searchInRmLogs()
        && !this.searchQuery.searchInNmLogs()
        && !this.searchQuery.searchInFileNames()) {
      throw new IllegalStateException("There is no target to search in");
    } else if (this.formatter == null) {
      throw new IllegalStateException("Formatter is not defined");
    }
  }

  @Override
  public void execute(SearchEngine searchEngine) throws IOException {
    List<Matcher> matchers = searchEngine.createMatchers(searchQuery);
    output = formatter.format(matchers);
  }

  public Printable getPrintable() {
    return output;
  }

  @VisibleForTesting
  public Query getQuery() {
    return searchQuery;
  }

  /**
   * Builder for the SingleExecutable class.
   */
  public static class Builder {

    private final Query.Builder queryBuilder = new Query.Builder();
    private final FormatterModifiers.Builder formatterModifiersBuilder =
        new FormatterModifiers.Builder();
    private Formatter<?> formatter;

    public Builder() {
    }

    public Builder withFormatter(Formatter<?> formatter) {
      this.formatter = formatter;
      return this;
    }

    public Builder withPattern(Pattern pattern) {
      queryBuilder.withPattern(pattern);
      return this;
    }

    public Builder isCheckingRmLogs() {
      queryBuilder.isCheckingRmLogs();
      return this;
    }

    public Builder isCheckingNmLogs() {
      queryBuilder.isCheckingNmLogs();
      return this;
    }

    public Builder isCheckingFileNames() {
      queryBuilder.isCheckingFileNames();
      return this;
    }

    public Builder removeDuplicationOfParameter(String param) {
      this.formatterModifiersBuilder.setKeyParameter(param);
      return this;
    }

    public Builder separateBySourceFile() {
      this.formatterModifiersBuilder.setSeparatingBySourceFile(true);
      return this;
    }

    public SingleExecutable build() {
      return new SingleExecutable(this);
    }
  }
}
